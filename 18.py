s = '''2 + ((6 * 6 + 4 + 3 * 4) + (4 + 3 + 5) * 3 * (5 * 6 + 5 * 3 + 6)) * 2 + 3 * (6 * (4 + 4 * 4) * 2 * 3 * 8)
6 * 3 + 5 * ((9 * 9 + 3) + (2 + 5 * 6 + 4)) + 7 + 9
7 * 3 + 8 + 8 * 4 * (4 * (7 * 4) + 9 * 5)
3 * 4 + 8 + 5
8 + (8 + (3 + 6) * 9 + 9 * 5) * ((5 + 9 * 7 * 3) * 4 * 5) + 6 + 9
((2 * 9 + 4 + 5) * 5) + 2
(4 * 8 * 5 * 7) * 2 * ((3 + 9 + 8) * 9 * 8)
(8 + 4 * 8) + (4 + 8 * 8) + 5 + 6
8 * (9 * 6 * 2 + (8 + 8 * 3 + 8 + 8) * 7 * (8 * 9 + 8 * 5 * 4 * 8)) + 8 * 2
7 * 3 + 5 + (4 + (9 * 2 + 6 + 8) + 4 + 2)
9 * 3 + 3 + (7 * 2 + 2)
3 + 2 * (3 + 4 + 4 + 7) + 8 * (4 * (8 * 8 * 2 + 3 + 9 * 8))
7 + (4 + 2 * 5 + 7) * (9 * 9 * 4 + (9 * 4) + (9 + 2 * 7 * 3 * 9) + (3 * 7)) * ((5 + 6) * 6 + (8 + 7 + 5 + 8) + 6) + 8
((4 + 6 + 3 * 2 + 6) + 2) * (8 + 5 * 5 * 6 + 4)
5 * 2 + 7 * ((6 + 8 + 2 * 9 + 5 * 2) + 6 + (5 * 9) * (4 * 3 * 5))
7 + (3 + (2 + 8 * 4 + 4 + 8 * 7) + 5) * 3 * 3
(5 + 8 * (2 + 5 * 3 * 9 * 6)) * 7
(8 + (9 + 5 + 7 + 4 * 7 + 4) + 5) * (9 + 4 * 4 * 3 + 5 * 5) + 7
7 * ((3 * 8 * 8 + 6 * 6) + (7 * 7 * 3 + 2) + 7 + 2 * 9 * 7)
(8 * 5 * 9 * 9 * (4 + 9) * 9) + (8 * 4 * (2 + 6)) + 8 * 9 * 2 * 4
8 + 5 + ((6 * 7) * 6 + 7 * 8) + 8 + 2
4 + (3 * 6)
(3 + 9 + (4 * 7 * 8 + 8 + 2)) + 2 * 4
9 * (9 * 7) + 3 + 5 + (4 + 8) * 5
4 * 4 + 8 * (7 * 2 + 8 + 5 + (3 * 2 + 7 + 9)) + 5
(8 + 5 * (6 + 3 + 6 * 9 + 8 * 2) + 8 + (5 + 3 * 8 * 6 + 3) * 6) * ((3 * 5 * 2) * (6 * 7) + 2) * 4 + (8 * 2 + 8 * 5)
(4 + 5 * 5) + 5 * 9 * 5 * ((2 * 4 + 2 + 7 + 8 + 4) + 7 + 7) * 2
8 * (6 * 9 + 3 * 3 * 6) + 4
((8 * 5 * 8) * 9 * 4 + 3) + 6 * 4 * 9 + 3
5 * 3 * (8 + 2 + 2)
8 + 3 + 2 * (5 + (4 * 6 * 8) + (4 + 8) + 2 + 5 + (6 + 3))
2 + ((5 * 5 * 4) * 9 + 3 + 4 * 4 * 4) + 2 + 9
3 * 2 * 8 * (2 * 6) * 4
3 + 9 + (5 + 2 * 4 * 4 + 8) * 3 * 6 + (4 + 7)
2 + (9 + 9 * 6 + 9 * 9) + 2 + 2
5 * ((6 + 7 + 3 + 9) * 3 + 5 + 3 * 4 + (4 * 6 * 9)) + 2
(8 + (3 + 5) + 7 * (2 * 4 * 4 + 8 + 2 * 4) * 5) * 6 + 5 * 2
6 * 4 + 4 + ((8 + 9) + 3 + 4 + 7) + 4
(5 + 4 * 5 * 4 + 5) * 6 * (6 + 5 + 8 + 7 * 5)
3 * (5 + 8 + 2)
((4 + 7 * 7 * 4 + 7) + (3 + 5 + 6 * 3 * 7 * 9) * 9 + 4 * 5 * 3) + 2 * (2 + 2 * 2 * 6 * (7 + 8 + 7) * (7 * 7 * 8 * 6 + 5)) * 3 * 7
5 + (8 * 7 + 4 * 7 * (5 + 3 * 8 + 8 * 2)) + 2
(9 + 7) * 5 + 9 * ((6 * 6 + 7 * 2 + 9 * 6) * 6 * 5 * 7)
3 * 9 + 9 + (9 + 3 * 9 + (6 + 2 * 9 + 8))
3 * 5 + ((6 + 5 * 6 * 5 * 6) + 7)
5 + 2 + (7 * 8 + 9 + 4 + 7 + 3) * (3 + 9 + 2 * 2 + 4)
5 * 5 + 6 + ((4 + 7 + 7 + 2 + 7) * (6 * 4 + 9 * 9 * 7 + 3) + 6 + 6 * 3) + (7 * 2 + 6 + (2 + 8 + 4 * 4 + 3) + 3 * 3)
((7 + 4) + 5 * (5 * 9) + 2 + 8 + 2) * 5 + 3 + 8 + 7
2 * (6 * 9 * 5) * 9 + 4 + 7
5 + (7 + 9 + (6 * 6 * 7) * 7 + 9 * 4) + 8 + ((2 * 9) * 8) + 8
(9 * 7 * (2 * 9 + 2 * 5) + 3 + 6) * 5 + 8 * 7 + 4 * 8
((7 + 2 * 5) + 5 * 3 + 4 * 4) + 7 + 5 * (8 * 2) + ((9 * 6 + 2) * 7) * (9 + 3 + 7 * 8 * 7)
(7 * (6 + 7 + 4 * 6 * 5) * 9) * 4 * (9 * 7 + (4 + 2 + 9 * 7) + 3)
5 * (4 * 9 * 3 + 5 + 8) * 4 * 4 + 2 + (3 * 8 * 7 + 4 * 7 * 9)
(3 + 4 * 5) * 5 + 7 * (3 + 3 * 9)
(4 * 3 + (4 + 6) + 2 * 7) + (9 + 2 * 9 * (9 * 8)) + 8 + (2 * 9 + 7) * 3 * 8
4 + (9 * 6 + (3 + 6 + 6 * 7 * 3)) + 8
(6 * 9 * (4 * 4) * 6 + 5 + 3) + 6 + 6 + (6 * (6 * 5 + 4 * 7 * 8) * (4 * 4 + 3)) * 2
(7 * 3 + 3 + 9) * (4 * 7 * 8 + 7) + (8 + 2 + 7 + (5 * 7 + 3) + 7) * (3 + 9) + 9 * (7 + 5 + 6 + 4 * 2)
(8 + 6 + (4 * 7 * 6) * 2) + 4 * 5 * 8
3 * 7 + (3 + 2) * (5 * (2 + 9 + 5 * 4 + 9 + 2) * 7 * 8) * 2
9 * 9 * (6 + (4 + 3 + 9) + (9 + 5 * 3 + 6 * 7 * 4) * 8 * (8 * 4 + 8 * 7) + 9) + 8 * 4
2 * (7 * (8 + 6 * 9 + 3 * 6 + 6) + 2) * 4
7 + 4 * (7 * 7 + (8 + 2 * 4 + 5 * 9)) * (9 + 6 + 6) * 9 + 6
3 * (8 + 4 * (9 + 6 * 5 + 8 + 9) * 5 * 6 * 3) * 5 + 4
(5 + 4 * 9 + 6 + (4 + 6 + 4 + 4)) + 5 * 6 + 4 + 8
9 + 3
5 * (4 + 2) + 4 * (8 + 8 * 4 * (4 * 9) * 4)
6 * (6 * 5 * 8 * 9) + (2 * 6 * 5 + 7 * 5)
7 + 2 + ((5 + 7 + 5) + (4 * 9 + 4 + 7) * 8 * 9) + 8 * 6 + (9 * 5 * 2)
8 * 7 * 8
(8 + 6) + 5 + (7 * 3 + 8 * (6 + 7 + 9 + 8 * 3) + 9 * (3 + 7 * 5 * 9 * 3)) + 6
5 + 6 + 3 + 9 * 6
((3 + 9) + 6 * 8 + 8) + 5 + 4
(4 + (8 + 6) * (7 * 2 + 3) * 6) + 5 * (7 + 5 * 4) * (8 * 2 * 7) * 3 + 6
4 * (4 + 4 * 2 + 3) * 5 * 6 + 6
(4 * 4 + 9 + 7 + 4 + (9 + 6 * 7 * 4 + 4 + 8)) * 4 * 9 + 3
8 * 3 * 6 * 9 * (6 + 3 * 8 + 5 * (2 + 2 + 9 + 6))
(2 * 7 + (9 + 8 + 6 + 8) + 9 * (7 * 7 + 4 + 3 + 2)) * 3 + 3
9 + 7 * (6 + 2 * 9 * (5 + 3 * 6 * 9 * 4) + (5 * 9 + 3 * 2 * 3 + 2))
(5 + 7 * 2 + 9) * 7 + 8 + 8 + 5 + 2
2 * 9 * (9 * 8 + 8 * 2 * 3 * 2) * ((8 + 9 * 6 * 6) * 6) * 3
(8 + 4 * 6 + 5 * 7) + 3 + 6 + 6 * 8
7 * 4 * 9 + (3 + 7 * 6 * 2 + 3 * 2) + 5
4 + ((8 + 4 + 9 + 2) + 7 * (2 + 8 * 8))
5 + 5 * (9 * 5 + (5 + 9 * 3 + 5 * 3 + 6)) * 8
4 + (3 * 5 * 6 + 4) + 9 * (8 * (3 + 8 * 5 * 2))
9 + (3 + (8 * 4 + 4) + 9 + 3) * (8 + 5 * (2 * 6) + 3 + 2 + 4) * 3 * 8 * 4
2 * (9 * 3 * 5 + (5 + 7) * (8 + 3 * 6 * 3 * 9) * 8) * 8 + (5 + 2 + 6 + 8 + (8 + 9 * 5 * 7 * 8 * 4)) * 7 * (8 + 9 + (7 + 2) + 8)
7 * 6 + (2 * 3) * 9 * 9
8 + (7 + (9 + 8 * 5) * 5 + 8 + 3)
(4 + 5 * 3 * 7 + (2 * 8 + 9 * 7 * 3) * 8) + 6 + 9 + ((5 + 9 + 2 * 2 * 5 * 3) + 4 + 9 * 5) * 4
2 + 9 * (9 * 8 * 7 + 5 + 6 + 3) * 7
7 * 6
(4 + 7 + 9) * ((2 + 4 * 3 + 7 + 9 + 8) + 3 * 3 * 8 + (8 + 3 * 5 + 7 * 2 * 9)) * 9 * 2
(7 * 6 * 7) + 4 + (4 * 6) * 6 * (6 * 6) * 9
((4 + 2 * 5 * 6 * 2) + 5 + 6 + (7 * 8) * 6 * 6) + 5 * 6 * 6 + 9 * 3
(8 * 6 * 5) + 2 + 4
(4 * (6 + 6 + 8 + 2 * 4 + 6) + 9 + (7 * 7)) + 5 * 2 + (9 * 2 * 2)
6 + 3 * 5 + 8 + 3 * 5
(5 * 5 + 2) * 5 + (3 + 3 * 8 + 2 + 7 * (5 + 8)) * 9
(3 * (9 + 7 + 3 * 3 * 8) + 7) * 5 * 7 * 2
(9 + 5) * 3 + 4
4 + 2 * 6 * (2 * (2 + 3 * 6 * 2) * 9) * 6
(6 + (3 * 8 * 2 * 2 + 4) * 7 * 6) * 9 + 3 * (2 * 9 * (3 * 3 * 6 + 2 * 4 + 2) * 3) + 2
((5 + 5) * 6 * 6 * (9 + 5 * 6 * 7 + 4 * 8) * 2 * 2) * (3 + 5 + 2 + (9 + 3 * 6 + 4) + (9 + 7 + 9))
(8 * (8 * 7 * 7) * 9 + 9 + (6 * 5 * 3 + 8) * 3) + ((9 * 9 * 8 + 5 + 9) + 8 * 6)
3 * 8 * (9 * 7) * 7
(6 * (7 + 7 * 6 * 3) * 9 * 9 + 3 * 6) + 3 + 3 * 2 + 3 * 2
4 * 6 * 8 * 4
8 * (7 + 4 + (2 + 7 * 3 * 2 * 4))
6 * ((3 + 6 * 2 * 7 * 7) + 9 + 9 + 9 + 6)
2 * 4 * 3 * 8 + (5 + 7)
(8 * (6 + 8) * 9 * 2 + 3) * 3 + 4 + 4
(9 * 8) * 3 + 3 + 7 * 2 * (7 * 4 * 5 + 2)
(4 * 6 * 3 * 5) + 3 * 9
3 * 4 * (6 * 6 + 8 + 3)
5 * ((4 * 4) + 6 + 8 * 9 + 2 * 4) * 3 * (4 + 4 + 8)
8 + (8 + 3 + 7 * (9 + 4 * 5 + 3))
8 * 8 + (3 * 8) * 6 + 3 * 4
7 + 7 + (3 * 5 * 6 + 9 + 4 + 9) + 7 * (7 * 8)
(2 * 7 + 6) * 4 * 9 * 4 * 5 * 9
(8 * 8 + 6 * 7 + (7 * 7 + 8)) * (3 * 6 * 3 * (4 + 5 * 2 * 8 + 4 + 5))
4 * (9 * (9 + 2 + 3) + 8)
(4 * 7 * 8 * 6 + 7 * 2) + (6 * (2 + 7 * 9) + 7 + 9) * 9
3 * (8 + 5) * 3 + 6 + (4 + 9 + 2 + (7 + 2 * 9 + 2)) + (9 * 8)
7 * 7 + 4 * 9 + 7 + 5
4 * (9 * 8 + 6) + 3 + 3 + 6 * 9
4 + 9 * 8 * 2 * (2 * 6 * 3 * 5 + 8 * 8)
9 * 6 + 4 + 6 + (9 + 5 * 3 + 3 + (4 * 7 * 3 * 7 + 5)) + 4
9 + 2 + ((8 + 4 + 5 * 7 + 2 + 4) * 6 * (9 + 8) + 5 + 4 * (2 * 6 * 2 * 3 + 3))
3 * (7 + 2 + 4 + 9 + 8 + 4) * (5 * 5 + 9) + 3 * 2
4 * ((9 * 2 + 3 + 4 + 5) * 8 * 6 * 3 * 7) + 2 * (8 + (3 * 2 + 5 + 6 * 4 * 8) + 8)
5 + (5 * 2 * 3 * 6) + (7 + (7 * 3 * 7) + 9 + 9 + 5 + 7) + 6
8 * 3 + 6
8 * 8
2 * (3 + 5 + 4 + (8 + 5 + 6)) + 9 * 5
(8 * 6 * 5 * 4 * 5) + 9 * (2 + (6 * 5 + 5 * 2) + (3 * 7 * 7 * 7 + 7) + 3 + 5) + (6 + 4 * 3 + 2) + (2 + 8 * 8)
(6 * 3 * (2 * 2) + 3) * (5 * 2 * 5 * 2) * 7
((8 + 5) + 8 * 3 * (9 + 6 + 5 + 2 + 9 + 9)) + 6 + 9 * 6
2 * (4 * 6 * 8) + (6 * 8 * 5 + (3 * 4 * 2 * 4)) * ((2 * 8 * 6) + 2 + 5) + (2 + 2)
2 * 3 * 9 + 3 + 5
6 + 2 + 7 * 5 + 8
3 + 9 + 6 + 2 + 3 * 8
3 + ((5 + 6 + 7) * 5 * 9 * 6 * 7) + 8
7 * 6 * 9 * (7 * (8 * 4 * 8 + 2) * 3 * 8) + 8 + 5
(2 * (4 + 5 + 6) * 7 + 9 * 9) + 7
5 * 5
(7 * 3 * (7 + 3 + 4 + 9 * 3) + (4 + 7 + 9 * 6) + 9) + (3 + (5 + 3 + 7) + 2) * 5 + ((8 + 2 + 7 * 7) * 4) + 8
(5 * 8 + (9 * 6 * 2) * 9 + 8 + 6) + (2 * 9) * 8
(9 * (3 + 3 * 3 * 2) * 7 * 3) + 3 + 5 * 7 * ((6 + 2 + 6 + 5 + 3 + 6) * 7 * 8 * 9 + 3 * 8) + 3
9 * (3 * 9 + 9 + 8 + 3 * 7) + 8 + 9
6 + ((9 * 9 + 6 + 6 * 7) * 7 + 7 + 8) * 8
2 * 9 + (8 + 9 + 8 + 4 + 3 * 3) * (5 * 3 + 5 + 4 + 6 * 7) * (9 * 5 * 2 * 2 + 6 + 7)
7 * 7 * ((4 * 8 + 3 + 9) + 4 * (2 + 4) + 9) * 6 + 5
9 * (7 * 3) * 9 + 3 * 8 + (8 * 6)
5 + ((9 * 9 + 9) + 8 * 4 * 5 + 8) * (5 + 4 * 6 * 2 * 9)
3 * (6 * 4 + (6 * 9) + 5 * 6) + 9 + 9
2 + 9 + ((5 * 4 + 5 + 5 * 7 * 5) * 5 * (5 * 6 * 9 * 9 + 8) * 7 * 5)
5 * 6 * 2 + 4 * ((6 + 4 + 4 + 5 + 6) * (5 * 8 + 3 * 6) + 7 + (7 + 5 + 3) + 2 + 5) + 3
5 * 6 + (6 + 3 + 5 * 6 * (6 + 7 + 6 + 9 * 5)) * 8
((5 * 6 * 2 * 8 * 3) + (5 + 8 + 5 + 4)) * 2 + 9
5 * 4 + 4 + 7
8 * 9 + (9 * 7 + 8 * 9) * (9 + 4 + 3 + 8 * 5) + 8 * 5
4 * 6 * 2 + (6 + 4 * (7 + 5 + 9 * 5) + 5)
(4 * 5 * 6 * 2 + 9) * 7 + (8 + (2 + 3 + 9 + 7 * 3 + 2) + (9 * 7) * 4 * 7 * 7) + 5 * 5 + 3
3 + 2 + (4 * 7 * 4 * (2 * 3 + 7) * 8 + 4) * 4
7 * (3 + 2 * 8 * (2 + 4 + 8 + 4 * 6))
7 + (5 + 5) + 2
(6 + (4 + 4)) + 2 + 5
7 * 6 + ((9 * 5 * 6 * 4 + 9) * (9 * 4 + 8 * 2 + 9) + 8 + (2 * 6 + 4 + 2) * (3 + 9 * 2 + 7 * 5) * 3) + 6 + 6 * 4
7 * 8 + 9 * (6 * 7 * 3 * 5) * 8 * 7
(9 * 7 * (9 * 4)) + 7 * 8 * 5 * 5
(5 * 3 + 8) * 5 * (9 + 6 + (8 * 5) * 8 + 5 + 6) + 8 * 2
(8 * 4 * 7 * 2 + (7 + 5)) * 8 * 4 * (3 * (4 + 8) * 6 * 8 + 8 + 2)
8 + 4 + 5 + (8 * 9 * 9 + 9 + 9) + 2 * (6 + 3 + 3 * 3)
5 + ((6 * 5) + 8 + 6) + (9 + 9) * 5
((7 * 7) * (4 * 3 + 5 + 6) + (8 + 7) + 6 + 7) * 8 * (2 * 9 + 8) + 4 * 4
(4 * 7 + (4 * 2 * 3 + 3 + 7 + 3) + 3) * (8 + 6 + 6 * (6 * 3 + 5)) + 2 + 7 + 8
3 + 4 + 7 + (5 * 7 + 8 + 9) * (2 * 4 * 8 * 5) + 9
8 + 4 + (9 * (9 * 7 * 8 * 5 * 7) * 4 + (7 * 4) * 2 + 2)
6 + ((6 * 7 * 9 + 7 * 3) * 3 + 2 * 9 * (2 + 9 * 9 + 3 + 7))
((7 + 2 * 7 + 9) + (2 * 6) * (9 + 7 + 7 * 6)) + 9 * (2 + 9 + (3 + 7) + (7 * 4 + 4 * 4) * (8 + 6 + 7)) * 4
4 * 4 * 6 * 6 + 7 * ((5 + 6) + 9 + 3 * 2 * 8)
5 + 7 + (3 + 7 * (3 + 3) + 2) * 3
3 * 3 + 2 * (9 * (6 * 4 * 4 + 6) + 8 * 4 * 9 * 4)
((3 + 7 * 4 * 4 * 5) + (2 * 7 * 4 + 5 + 4 * 6) + 5 + 4) * 2 + 4
(8 + 8 + (5 * 3 + 4 * 2 * 2 + 5) * 5) + 4 * 3 + 6 + 6 * (2 + 6 + 4)
(5 * (4 + 5 * 3 * 3 * 6) * 6) * (5 * 8)
3 * 5 + (7 * 7 + 2 * 5 + (9 + 2 * 7 + 5 * 8 * 6) * 2)
7 + ((2 * 7) * 2 * 8 * 3 * (6 + 9 + 3 + 5) * 9) + (4 * 2 * 8 + 2)
5 * (9 + 3 + (9 * 2 + 4 + 9 * 2 + 4) * 6 * (2 * 3) + (5 * 9 * 2)) * (2 + (6 + 7 + 4 * 9 * 9 * 2) * 8 * (9 + 4)) + 2 * 5
(6 + 2) + ((2 + 6 + 5) + 9 * 3 + 8) * 6 + 5
((9 * 2) * 7 * 4 * 3 * 8 * (2 + 7)) * ((8 + 2) + 8) * 3 + 5 * 7
4 + 5 * (6 * 2 + 5 * (8 * 7 * 5) + 8 + (9 + 8)) + 3 + (5 * 4 + 8) * 2
7 + 4 * 4
3 + (5 + 2 + 8 + 4 + 6 + (2 + 5 * 5 * 3 * 8)) + ((7 + 7) * 6 + (5 * 2 + 9 * 4 + 2 * 5)) + 4 + (3 + 2 + 8 * (2 + 4 * 4 * 5)) + (5 + (6 * 7 * 6 * 7) * 3)
6 + 4 + ((2 + 2 * 4) + 8) + 6 + (8 * 5 + (8 * 3 * 4 * 8 * 7) * 3)
(2 + 7 + (3 * 9 + 8 + 3 + 5 + 5) + 4 + 2) * 9
3 + 6 * 9 * (8 * 3 * 8 + (9 + 3) + 3 + 3) + (9 + 7 + 8 + 3 + (3 + 3 + 4 * 5))
8 + ((6 * 7 * 8 * 2 * 4 * 8) + 3 + 7 + 7 * 3) * ((3 * 4 * 8 + 3 * 5 * 7) + 7 + 5 * 3 * (2 * 2 + 2))
6 * (4 * 3 + 5 * 3 + 4 * 9)
((7 + 6 + 4 * 9) * 4) + (5 * 2) * (7 * 7) + 7
(3 * 9 * 8) + (7 * 4 * 9 * 9 * 4 + 7) + 2
9 * 9 * 9 * 5 + ((5 * 2) + 5 + 9 + 5 * 9)
3 * ((9 + 3 * 3 * 5) * 6 * 2) + 2 + 3 * (3 + 2 * 8 * 6 + 5 + 4) * 8
6 + (9 + (9 * 8 + 4 + 6 + 5) * (9 + 9 * 8 * 9 + 8)) * 4
3 * (4 * 2 * (3 + 9 + 3 + 2 + 9) + (7 * 5 + 4)) * 6 + (2 * 6 * 4) + 3 * 3
(6 + 4 + 3) * 2 * 8 * 7
6 + 7 * 6 + (2 * 7 * (5 * 7) + 3)
5 * ((9 + 3 * 5) + (6 * 8) * 9 + 3 + 8) + 4 + 7 * 6
3 * 3 + ((7 * 6 + 9 + 6 + 4 * 9) + (4 + 8 + 2 * 9 * 3) * 6 * 4 + 4 * 8) * ((5 * 8 + 8) * 5 * 9 * 9 + (3 + 9 + 2 + 5 * 5 * 2) + (6 + 2 + 9 * 6)) + 7 + 2
4 + 2 * 9 * 5 + 8 * (8 + 9 * 8 * 2 * 3)
((7 + 2 * 7 * 5) * (3 * 8 * 8 + 4 + 2) * 4 * 4 * 6 + 9) * 2 * (5 * 2 + 3 * 9) + 8 + 8
9 * 4 * 3 + 6 + (6 + 3 * 9 * 5 + (6 + 2 + 3 * 8) * 8) + (7 * 6 * 2)
8 + (6 * 7 + 7 + 9) + ((7 * 8 + 3 * 6 + 5) * 8) + 6
(3 * 9 * 9 + 6) * 6 * 9 + 4
3 * ((5 + 3 + 6 + 4 * 4 + 2) + 6 * 2) * 8
7 * 8 * 3 * 4 * ((4 + 8 + 4) + 3 + 4 * (4 + 6 * 3 + 8 * 8) + 4 * 2)
5 + (7 + 6 + 8 + 3 + (8 + 2 + 8 * 8 + 3)) + 7 * 4
8 + 7 + 6 * 5
8 * ((2 + 9 * 4 * 4 * 8 + 9) + 3 + 4 * (4 + 5 * 9 + 6 + 2 + 6))
8 + (5 * 5 * 6 * (3 + 6 * 8) + (5 * 2 * 8 * 7)) + (6 * 4 * 2)
5 + 5 + ((4 + 2 + 6 * 3 * 3 * 4) * (8 + 6) * 4 * 9 + 8 * 6)
2 + (9 + (7 + 6) * 7 * 8) + 7 * (9 + 3 * (8 * 4 + 2) + 7 + 9) + 2
9 * 6 + 5 + 9 + (8 * 6 + 4) * (5 * 4 + 7 * 2 * (3 + 8 * 7 + 4 + 6 + 5))
3 * (9 + (2 * 9 + 6)) + 6 * 9
(6 * 8 * 8 + 2) + (2 + 5 + 4) * 9 + 6
3 * (5 + 4 * 5 + 8 * (2 * 3 * 4 * 6 * 6))
8 + 2 + 7 * (2 + 6) + (2 * 2 * 5 * (7 + 8 * 6 * 2 * 8 + 3))
3 * (7 * 5 * 9 * (2 * 5 * 8 + 2 * 3) * 7)
7 * (9 + 7 * 5 + 2 * 7) * (6 * (6 + 5 * 2)) * 5 + 5 + 3
(6 * (8 + 6 * 2 + 7) + 7 + (9 * 5 + 4 + 7 + 8) * (6 + 4 + 6 * 6 * 8)) * 2 * 9 + 7 + 6 * 4
6 + (5 * 5 + 3 * 5 + 2 + 9) + 8
3 + 3 + ((4 + 4 + 2 * 5 + 2) + 7) + 2 * 6
2 + 9 + 8 + (6 * (4 + 2 + 8) + 2)
8 + (7 + 8) * 2 + 9
7 * 9 * 3 * (3 * 2 + 7 * 4)
4 * (5 * 5 * 6 + 9 + 2)
(6 * 6 * (3 + 4 * 6 + 7 * 6) + 5 * 9) * 3 * ((4 + 5 + 7 + 5) * 9 * (5 * 6 * 4 + 7 + 6 * 8) * 2 * 2) * ((9 + 7) * 4) + 7
9 + 4 * ((3 * 9) + 6) + 8
(6 * 9 + (5 + 3 * 2 * 7) + 8 * 3) + (7 + 9)
9 * (5 * (7 * 9)) + 7
8 * ((4 + 6 + 9) + 7 * 9 * 2 * 2 * 8) + 7 * (3 * 6 + 3 * 7) + (2 + 7 + (4 + 2 * 5 * 5 * 6 * 5)) * 2
(9 + 2 * 5 * 9 * (9 * 7 * 9 * 6)) + (2 + 2 + (2 + 6 * 7 * 7) * 3 + 2) * ((4 * 7 + 2 + 5 * 6) + (6 * 8 + 9 * 7)) + (5 + 6 + 9 + 4 * 6)
9 + 7 * 9 * (9 * (9 + 7 + 8) * 2 + 8 + 4 * 4) * (2 + 8 * 6 * 9 * 8 + 4) * 3
((7 + 6) * 5) + 8
(2 + 9 + 6 * 3) + 9 * 5 * ((8 + 7 * 2) + 7) * 6 + 4
(7 + 3 * 7 + 8 * 9) * 5 * 7
2 + ((2 + 3) * 2) + 8 + 7
2 * 4 + 5
3 * ((9 * 8 * 6 + 3 * 9) + 9 * (3 * 5 * 8 * 6) * 5 * 4) + 2 + ((3 * 7 * 5 * 5 + 4 + 6) + 3 * 2 * 8)
2 * 6 + 3 + (4 + 8 * 6) * 8
5 * 9 + 7 + (8 + 6 + 2 + 9) + 3
8 * 2 * 6 + (3 + (9 * 6 * 2 + 6 * 2 * 2) * (8 * 8 * 7 + 6)) * 4
6 * 4 * 3 * 6 + (7 + 3 + 6)
(7 * 3 * 9 * 7 * 4 * 3) * 5 + 7
7 + 8 + 8 * 5 + (5 * 4 + 5 * (6 * 5 * 6) + 8)
(2 + 3) * 8 + 2 * 8 * 7 * 2
(6 + 5 + 5 + 7 * (4 + 3 * 2 * 2 * 8)) + 9 * 5 + 7
2 + (9 + 3 * (8 + 6) + 8) * (3 * 6 + (3 * 3 * 3 + 2))
7 * 8 + 2 + (3 * 3 * 4 * (2 + 9) * 9) * 7 + 2
6 * 8 + 5 + 6 * (3 * 8 * (3 + 8 + 9 + 7)) * (4 + 5 + 9 * 5 + (8 + 4 + 7) + 5)
((7 * 4 + 4) * 7 * (5 + 3 * 2 + 4 * 6 * 5) * 2) * 7 * 9 * (5 * 4 + 6 + 2) + 9
2 + 6
3 + 5 * 8 * ((9 * 6 * 3 * 8 + 7) + 8)
7 * 4 * 8
(4 + 9 + 8 * 9 + 7 + 7) * 9
2 * 2 * 2 * (2 * 6 * 3 * 5 + 9) + (2 * 8)
((6 + 8 * 9 * 2 + 9) + 2 + (3 + 2 * 3) + 2 + 8) + 8 * 8 + (4 + (3 * 8) * 9) * 3 + 5
6 + 5 * 8 * 7 + 3 * 3
9 * (6 * 2 * 5 + 5 * (2 + 6 * 7) * 2) * 9 + 7
3 + (6 + 2 * 8 * 3 + (4 * 9)) + 8 + 4 * (5 + 6 + (3 + 9 + 9 + 4 + 3 * 9) * 5 + 2) + 7
5 + 9 * (6 * 9 + (7 + 3 * 9) + 8) * 7
8 * ((2 * 3 + 3 + 6 + 3 * 7) * 3) * 2
5 + 2 + 8 + (2 + 5 * 7 + 9 + 2) * 3
9 * 5 + 3 + (8 + 2)
2 + 9 * (3 * (5 + 7) * 5 + 3) * ((8 * 5 + 4 * 7) + 6) + ((2 * 5) * 2 + 7) + 8
5 + (4 * 9 + 7) + 9
(4 + 8 * 3 + (2 * 5) + 8) + 2 + 2 * 4 * 2 * ((2 * 2) * (2 * 9 + 2) * 6)
5 + ((4 * 2) * 2) * 3
(8 * (3 + 4 * 9 + 9 + 4 * 5) + 3 + 5) + 3 * 4 + 2 * 9
9 + (2 * 2) * 2 + (7 * 3 * 7 + 4) + 5
5 + 6 * (6 + 6 * (4 + 5 * 5 * 3 * 4) * (8 * 9 + 4) * 7 * (8 + 8 + 9 + 3))
3 * (5 + 3 + 7 * 9 + 3 + (3 * 5)) * 3 + (7 * 8 * 5)
(2 * (4 * 5 + 5 + 9 + 9) * 5 + (9 * 6)) * 5 * 5 + 4 * 3 + (5 * 8)
6 + (4 + 2 + 5 * (8 + 5 + 6 * 5 * 6 + 6)) + 5 + 5 + 8
((2 * 4 + 6 * 5) * (5 + 6) + 9 + 9) + 6 * 2 + 3 + 3 * 9
2 + 7 * 2 * 4 * ((2 * 6 + 2 + 2 * 4) * 5) * 7
9 * 3 + (4 * 4 + 4 * 9) * 7 * 2
7 + 5 + 7 * (6 * 4 * 5 + 3 * 9)
(9 * 7) * 3 + 2 * 8
2 * 8 + 4 + 9 * 9
5 + (7 + 4) + 8 + (4 + (4 + 8 * 4 * 2) + 7 + 5) + 9 * (3 * (5 * 8 * 7))
5 + 5 + 9 + (6 * 9 + (9 + 3 * 9 * 3 * 3) * 4) * 9 * 7
(4 * 7 * (9 * 7 + 3) * (8 + 3) * 3 * 9) * 9
3 * (9 + 6 * (3 + 2 * 3) + 7 * 2) * 9 * 9
2 * 9 + (4 + 9 + (3 * 9 * 8 * 5 * 9)) + (8 * 6 + 2 + 7 + 9) * 6 + 8
(8 + 5 * 5 * 5) * 2 * 8 * (4 * 3 * 3) + 3
7 * ((2 * 4) + 3 + (3 + 8 + 9 * 6) + 3 * 9 + 7)
(2 * 7 + 7 * 8) * 3 * (3 * 7 * 9 * 9 * 5 + 2)
(2 * (3 * 5 + 8)) * (8 * 4 + (6 + 2 * 2 + 7) + 3 + 2) * 9 + 3 + 4
9 + (4 * 5 + 2 * 5 * (5 + 4 * 9 + 3)) + 9 + 9 * (4 + 4 * 8 + 4)
8 + (2 * 4) + (8 + 4) * ((6 + 3 + 4 + 4 + 7) * (7 + 6 + 3 + 3 * 3 * 6)) * 6
3 + 6 + (2 * 7 * 2 * 2) + 5
((2 + 7) * 9 + 5) * 5 + ((3 * 9) + (9 + 7 * 6) + (7 + 4 + 7 + 4) + 7) * 3
5 + 2 * 5 * 9 + (6 + 7 + 8 + (2 + 3 + 6 + 6 * 6 * 7) * 8 + 6) * 4
3 + (4 * 2 * 7 + 8) * 5
2 + 9 + 3 + 2 * 3
(5 + (5 + 7 * 5 + 6 + 5) * 3 * 3 * 8) * 4
3 * 9 * 7 + (8 * 8 * (4 + 5) + 4 * 2) * (7 + 8 * 4 + 5 + 2 * 2)
(3 + 6 + (7 + 6 * 2 + 2 * 6 + 5) + 8 + (5 * 7 + 5 + 9)) + 2 + (2 + (2 + 3 * 3 + 2 * 9) * (4 + 9 * 7 + 3) + (5 * 9 + 6 * 3 + 3 + 9) + 8) * 4 * 8
(6 * 8 * 9 + 3 * 4) * 5
6 * 9 * 7 * 2 * (7 + 4 + (5 + 6 + 7 * 4 * 3) * (2 + 7 + 2 * 6) * 8)
9 * (8 + 4 + 6 * (8 * 8 * 4) * (8 * 2 + 4) * 8) * 2
6 * ((2 + 6 * 7 + 5) + 2 * 4 + 6 * 8 * 4) * 2 + 4 + (4 * 2 * 3 + 9 + 3 * 6) + 4
9 * (6 * 5 + (7 * 8) * (2 + 7 * 3 + 3 + 4 * 6)) + 6 * 5 * 6 + 9
9 * (7 + 4 * 6 * 4) + 3 * ((9 * 5 + 4) + (8 + 8 + 6 + 2 + 3 + 7)) + 8 * 9
(6 + 6 + 2 + 3) * (3 * 3 + 3 * (9 + 8 + 4) + (8 * 8 + 2 * 4 * 3))
9 + ((7 * 7 + 9 * 3) * 4 + 4 + 3) + 8 * 6 * (2 * (2 * 9 * 8 * 2 + 3 + 2) + 3 * 3 * (6 * 8 + 3 * 3))
(7 * 4 * 6) * (5 * 5) + 8 * 7 * 5
((5 + 9 + 6 + 5 + 4) + 6 * 9 + 5 + 4) * 2 * 4 * 8 + (7 + 5 * 5 * (8 + 6 + 9 + 7 * 6 + 8) * 3)
9 * ((4 + 6) + 2 + 5)
(5 + 6) * (2 + (9 * 5 + 9) * (9 + 6 * 3 + 4 * 5 * 7) + (6 + 8)) + ((8 + 2 + 5) + 5 + 5 + 8) + (4 + (8 * 3 + 5 + 3 + 8 + 6) * (8 * 3 + 5 * 7 * 8) * 3 + 7 * 7) + 8 + 6
6 + 6 + (4 + (4 * 6 * 3) + 2 + 5 * 4) * 6
4 + (8 * 3 + (6 + 2)) * (6 + 8 + 7 + 2 * 4 * 9) * (5 + (5 * 4 * 3 + 7 + 7 * 8) + 8 * (9 * 5 * 9) + 9) + (4 + 8 + 4 + 8) + (9 * 9 + 8 * 3)
(5 * 2 * 8 * 3) * 5 + 5 + 8 + 9
6 * ((4 * 3 + 2 * 5 * 4 * 6) + 4) + 3 * 6
9 * 5 + (9 + 7)
8 * 2 * 5 * 6 + (6 * 3 * 5 + 4 * (4 * 4 * 4 * 2 + 6) + 4)
6 + (3 + 7 + 8 + 8) * 9 * 6
2 + 5 * ((4 * 2 + 6) * 5 * (6 * 2 + 4 * 8 * 6) + 8) * 8 + 6
4 + 5 * ((4 + 2) + 3 + 5 + (4 + 5 * 3 * 6 + 6) * (5 + 9 + 9 + 6 * 4 + 7) + 8) * 5 * 5
6 * (5 + 4 + (3 + 3 * 3 * 8 * 3) * (2 + 3 * 2 * 2) * 5 + 7) + 2 * 2 * 6 + 9
((3 + 8 * 7 + 3 + 3 + 3) + 3 + 8) * 5
4 + 9 + (9 + 5 * 4 * 8 * 2 + 4)
5 * (4 + 8 + 9 * 5) * ((6 * 9 * 9 + 2 * 5 * 8) * 9 * 2 + (9 * 3 + 4 + 7 + 3 + 2) * (6 * 7 * 5 + 2 * 9 * 2) + (7 * 9 * 4 * 2 * 3)) + 9
7 * 6 + (4 * 4 + (7 * 9 * 6) * (9 + 7) + 5 + 6)
8 + (5 + 4 + 9) + 7 * (5 * 8 + 3 * 5) * 9
8 + (6 + 9 * 8 * 8) + (9 + 7 * 9 + 5 * 7 + 3)
4 + (6 * 6) * 6 + 2 + 4
(9 * 2 + 3) + 4 + 6 + 7 * (2 * 4 + 8 + 5) * 4
5 * 6 + 9 + 7 + 3 * 2
5 * 3 * 5 * ((9 + 8 + 9 + 3) + 6 * (9 * 4 * 2 + 5) * (9 + 9 * 3 + 4))
5 * (3 * (7 + 7 + 8 + 2 * 7 * 9) + 5 + 9) + ((9 * 5 + 4) * 7 * 8 + 3) * 7 + (3 * 8 * (4 + 6 * 2 * 3 + 7 * 8) * 7 * (7 + 4) * 5)
5 * (8 + 3 * 6 * 2) * 9 + 6 * 2 * 5
6 * 4 * 2 + 5 * (9 + 4 * 8 * 3 + 8)
4 * ((6 + 5 + 9 * 9) * 6 * (9 + 7 + 2 * 6 + 2) + 2 + (5 * 4 * 4) + 5)
(8 * (9 * 2 * 4 + 5) * 4 + 9 * 8 * (3 * 6 * 9 + 3 * 8)) * 4 + 5
(5 + (3 * 7 * 8 + 6)) * 4
(4 + 5) + 8
8 * 8 * (2 * (7 * 5 + 7) * 4 + 8) + 2 * 8
5 * 9 * (6 * 4 * 6) * 7 * 9 + 2
2 + ((5 * 4) + 5 + (8 * 9 * 9 + 2 + 9 * 9) + (8 + 4 * 2 + 6) + 8)
(6 * 2) * 4 + 4 * (8 * 5 + 3 + (3 * 5 + 7 + 3 + 5 * 5)) * 2 + 5
3 * 8 + 3 + (6 * (3 * 7 * 4 + 8) * (6 * 2 * 8) + 6 + (5 * 2) * 8) + 7
2 * 8 + 6 * 4 + (5 + (9 * 3 * 4 * 2)) * (4 + 6 * 9 * 8 * 7 + 4)
7 + 6 * (4 * (2 + 8 + 5 * 8 + 3)) + 4 + 2
((3 + 8 + 3 * 6) + (2 + 5 * 7) * 4 + 6 + 7) + (2 + 3 * 6 * (7 + 2 + 7)) * 6 + 2
8 + 4 * 9 * 3 + (5 * 2 * (9 * 3 * 2)) * 6
6 + 7 * (8 + 5 + (2 + 3)) + 5 * 5 + 9
5 * ((6 + 3 * 3 + 6 + 2) + (8 * 9 * 9) + 7)
3 + (7 * (3 + 7 + 7 * 3 * 4) + 5 * 7 * (8 + 4 + 6 * 9)) * 2 * 7
(9 * 6 * (4 * 9 + 6 * 6)) + 8 * (5 + 8 + 5 + 4 * 2 + 3)
3 * (8 + 8 + 7) * (7 * 2 + 4) + (7 + 9)
((9 * 5 + 6 + 9) + 9 + 8) + 3 + 9 * 6 * 8
((8 + 5 * 2) + 4 + 8) + (2 * 5)
(6 + 6 * 8) + 4 * 3 + (8 * 2 + 2 * 3) * (7 * (8 * 4)) * 9
6 * (9 * 5 + 5 * 3) + 8 + ((8 + 3) * (3 + 5 * 7 + 9 * 9 + 2)) + 6 + 2
(7 * 7) * ((3 * 7) + 9 + 4) + (4 * 9 * 8 * 6 * (2 + 4 * 4)) + 5
4 * 3 + 6 * 8 * 5 * (4 * 7 + (5 + 5 + 5 + 3 + 5))
(2 + 6 + (6 * 5 + 4 * 8) * 3 + 2) + 6 + 3
(4 * 5 * 7 * 6 + 6 + (2 * 8 * 6 + 2 + 9)) + 4 + 7
9 * 4 * 5 + 2'''

# # 5, 4, 6
# # 5, 6, 6
# s='''1 + 1 + 1 + 2
# 1 + 1 * 1 + 2
# 1 + 1 + 1 * 2'''

# 51, 26, 437, 12240, 13632
# 51, 46, 1445, 669060, 23340
# s = '''1 + (2 * 3) + (4 * (5 + 6))
# 2 * 3 + (4 * 5)
# 5 + (8 * 3 + 9 + 3 * 4 * 3)
# 5 * 9 * (7 * 3 * 3 + 9 * 3 + (8 + 6 * 4))
# ((2 + 4 * 9) * (6 + 9 * 8 + 6) + 6) + 2 + 4 * 2'''

#
# 481142, 46080, 312, 12, 495, 312, 12, 324, 21, 21, 21
# s = '''2 + ((6 * 6 + 4 + 3 * 4) + (4 + 3 + 5) * 3 * (5 * 6 + 5 * 3 + 6))
# 2 + 3 * (6 * (4 + 4 * 4) * 2 * 3 * 8)
# 6 * 6 + 4 + 3 * 4
# 4 + 3 + 5
# 5 * 6 + 5 * 3 + 6
# (6 * 6 + 4 + 3 * 4)
# (4 + 3 + 5)
# (6 * 6 + 4 + 3 * 4) + (4 + 3 + 5)
# (2 * 2 + 3 * 2) + (0 + 1)
# (2 * 5 * 2) + 1
# (2 * (2 + 3) * 2) + 1'''

# # 9, 9, 9, 9, 9, 17, 5
# # 9, 9, 9, 9, 9, 17, 5
# s = '''(2 * 2 * 2) + 1
# (1 * 2 * 2 * 2) + 1
# (2 * 1 * 2 * 2) + 1
# (2 * 2 * 1 * 2) + 1
# (2 * 2 * 2 * 1) + 1
# (2 * 2 * 2 * 2) + 1
# (2 * 2 * 1 * 1) + 1'''

#
# 23340, 11664, 54, 210, 40, 40, 40, 40
# s = '''\
# ((2 + 4 * 9) * (6 + 9 * 8 + 6) + 6) + 2 + 4 * 2
# (2 + 4 * 9) * (6 + 9 * 8 + 6) + 6
# (2 + 4 * 9)
# (6 + 9 * 8 + 6)
# (5 * 2) * (1 + 2) + 1
# (5 * 2) * 1 + 2 + 1
# (5 * 2) * 1 + (2 + 1)
# (5 * 2) * (1 + 2 + 1)'''

l = s.splitlines()

def apply_op(op,v1,v2):
    if op == "+":
        return v1 + v2
    elif op == "*":
        return v1 * v2
    else:
        print("unexpected op", op, v1, v2)
        raise

def process(prev_val, prev_op, line):
    if len(line) == 0:
        return prev_val

    if line[0].isdigit():
        if prev_op is None:
            return process(int(line[0]), None, line[1:])
        else:
            val = apply_op(prev_op, prev_val, int(line[0]))
            return process(val, None, line[1:])
    elif line[0] == "+" or line[0] == "*":
        return process(prev_val, line[0], line[1:])
    elif line[0] == "(":
        post_val, line_remain = process(None, None, line[1:])
        if prev_op is None:
            val = post_val
        else:
            val = apply_op(prev_op, prev_val, post_val)
        return process(val, None, line_remain)
    elif line[0] == ")":
        return prev_val, line[1:]
    else:
        print("unexpected character at:",prev_val, prev_op, line)

results = []
for line in l:
    line_clean = "".join(line.split(" "))
    result = process(None,None,line_clean)
    results.append(result)

print(results)
print(sum(results))


def process_v2(prev_val, prev_op, line):
    print(prev_val, prev_op, "<",line,">")
    if len(line) == 0:
        return prev_val, line

    if line[0].isdigit():
        if prev_op is None:
            return process_v2(int(line[0]), None, line[1:])
        elif prev_op == "+":
            val = apply_op(prev_op, prev_val, int(line[0]))
            return process_v2(val, None, line[1:])
        elif prev_op == "*":
            post_val, line_remain = process_v2(int(line[0]),None,line[1:])
            val = apply_op(prev_op, prev_val, post_val)
            return val, line_remain
    elif line[0] == "+" or line[0] == "*":
        return process_v2(prev_val, line[0], line[1:])
    elif line[0] == "(":
        post_val, line_remain = process_v2(None, None, line[1:])
        if prev_op is None:
            val = post_val
        elif prev_op == "+":
            val = apply_op(prev_op, prev_val, post_val)
        elif prev_op == "*":
            post_val, line_remain = process_v2(post_val,None,line_remain)
            val = apply_op(prev_op, prev_val, post_val)
            return val, line_remain
        return process_v2(val, None, line_remain)
    elif line[0] == ")":
        return prev_val, line[1:]
    else:
        print("unexpected character at:",prev_val, prev_op, line)

results = []
for line in l:
    line_clean = "".join(line.split(" "))
    print("\n", line_clean)
    result = process_v2(None,None,line_clean)
    results.append(result[0])

print([x for x in enumerate(results)])
print(sum(results))